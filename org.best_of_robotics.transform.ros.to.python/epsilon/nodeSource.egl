#!/usr/bin/env python
import roslib; roslib.load_manifest('[%=package.name%]')
import rospy

[%for (publisher in node.publisher) {%]
##include "std_msgs/[%=publisher.msg.asString()%].h"
[%}%]
[%for (subscriber in node.subscriber) {%]
##include "std_msgs/[%=subscriber.msg.asString()%].h"
[%}%]

class [%=node.name%]:
	def __init__(self):
		[%for (publisher in node.publisher) {%]
			self.[%=publisher.name%] = rospy.Publisher('[%=publisher.topic.name%]', [%=publisher.msg.asString()%])
		[%}%]
		[%for (subscriber in node.subscriber) {%]
			self.[%=subscriber.name%] = rospy.Subscriber("[%=subscriber.topic.name%]", self.[%=subscriber.topic.name%]Callback) 
		[%}%]

[%for (subscriber in node.subscriber) {%]
	def [%=subscriber.topic.name%]Callback(self, a):
[%=out.startPreserve("#", "#", "callbackCode", true)%]
[%=out.stopPreserve()%]
		pass
[%}%]	
		
	def run(self):
		pass

if __name__ == "__main__":
	try:
		rospy.init_node('[%=node.name%]')
		n = [%=node.name%]()
		while not rospy.is_shutdown():
			n.run()
			rospy.sleep(0.2)
	except rospy.ROSInterruptException:
		print "Exit"

###### Old C++ template ####

#include <ros/ros.h>



[%=out.startPreserve("/*", "*/", "include", true)%]
[%=out.stopPreserve()%]
//Test234
using std::string;
const string NODE_NAME = "[%=node.name%]";

[%for (subscriber in node.subscriber) {%]
void [%=subscriber.topic.name%]Callback(const std_msgs::[%=subscriber.msg.asString()%]::ConstPtr& msg)
{

	ROS_INFO("Received: %s", msg->data.c_str());
}
[%}%]
	

int main(int argc, char **argv)
{
	ros::init(argc, argv, NODE_NAME);
	ros::NodeHandle nodeHandle;

	[%for (publisher in node.publisher) {%]
	ros::Publisher [%=publisher.name%] = nodeHandle.advertise<std_msgs::[%=publisher.msg.asString()%]>("[%=publisher.topic.name%]", [%=publisher.queueSize%], [%=publisher.latch%]); 
	[%}%]
	
	[%for (subscriber in node.subscriber) {%]
	ros::Subscriber [%=subscriber.name%] = nodeHandle.subscribe("[%=subscriber.topic.name%]", [%=subscriber.queueSize%], [%=subscriber.topic.name%]Callback); 
	[%}%]
	
	
	[%=out.startPreserve("/*", "*/", "mainCode", true)%]
	[%=out.stopPreserve()%]
	
	[%if (node.loopRate > 0) {%]
	ros::Rate loopRate([%=node.loopRate%]);
	while(ros::ok()){
		[%=out.startPreserve("/*", "*/", "periodicCode", true)%]
		//PUT YOUR CODE HERE.
		[%=out.stopPreserve()%]
		ros::spinOnce();
		loopRate.sleep();
	}
	[%} else {%]
	ros::spin();
	[%}%]
	return 0;
} 
