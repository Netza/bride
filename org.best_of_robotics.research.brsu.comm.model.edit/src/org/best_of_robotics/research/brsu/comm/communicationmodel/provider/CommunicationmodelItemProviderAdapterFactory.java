/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.best_of_robotics.research.brsu.comm.communicationmodel.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.best_of_robotics.research.brsu.comm.communicationmodel.util.CommunicationmodelAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CommunicationmodelItemProviderAdapterFactory extends CommunicationmodelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CommunicationmodelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.best_of_robotics.research.brsu.comm.communicationmodel.Connector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConnectorItemProvider connectorItemProvider;

	/**
	 * This creates an adapter for a {@link org.best_of_robotics.research.brsu.comm.communicationmodel.Connector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConnectorAdapter() {
		if (connectorItemProvider == null) {
			connectorItemProvider = new ConnectorItemProvider(this);
		}

		return connectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.best_of_robotics.research.brsu.comm.communicationmodel.Interaction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InteractionItemProvider interactionItemProvider;

	/**
	 * This creates an adapter for a {@link org.best_of_robotics.research.brsu.comm.communicationmodel.Interaction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInteractionAdapter() {
		if (interactionItemProvider == null) {
			interactionItemProvider = new InteractionItemProvider(this);
		}

		return interactionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.best_of_robotics.research.brsu.comm.communicationmodel.Distribution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DistributionItemProvider distributionItemProvider;

	/**
	 * This creates an adapter for a {@link org.best_of_robotics.research.brsu.comm.communicationmodel.Distribution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDistributionAdapter() {
		if (distributionItemProvider == null) {
			distributionItemProvider = new DistributionItemProvider(this);
		}

		return distributionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.best_of_robotics.research.brsu.comm.communicationmodel.Transport} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransportItemProvider transportItemProvider;

	/**
	 * This creates an adapter for a {@link org.best_of_robotics.research.brsu.comm.communicationmodel.Transport}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransportAdapter() {
		if (transportItemProvider == null) {
			transportItemProvider = new TransportItemProvider(this);
		}

		return transportItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.best_of_robotics.research.brsu.comm.communicationmodel.PubSub} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PubSubItemProvider pubSubItemProvider;

	/**
	 * This creates an adapter for a {@link org.best_of_robotics.research.brsu.comm.communicationmodel.PubSub}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPubSubAdapter() {
		if (pubSubItemProvider == null) {
			pubSubItemProvider = new PubSubItemProvider(this);
		}

		return pubSubItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.best_of_robotics.research.brsu.comm.communicationmodel.Protocol} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProtocolItemProvider protocolItemProvider;

	/**
	 * This creates an adapter for a {@link org.best_of_robotics.research.brsu.comm.communicationmodel.Protocol}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProtocolAdapter() {
		if (protocolItemProvider == null) {
			protocolItemProvider = new ProtocolItemProvider(this);
		}

		return protocolItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.best_of_robotics.research.brsu.comm.communicationmodel.Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyItemProvider propertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.best_of_robotics.research.brsu.comm.communicationmodel.Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyAdapter() {
		if (propertyItemProvider == null) {
			propertyItemProvider = new PropertyItemProvider(this);
		}

		return propertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.best_of_robotics.research.brsu.comm.communicationmodel.TCP} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TCPItemProvider tcpItemProvider;

	/**
	 * This creates an adapter for a {@link org.best_of_robotics.research.brsu.comm.communicationmodel.TCP}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTCPAdapter() {
		if (tcpItemProvider == null) {
			tcpItemProvider = new TCPItemProvider(this);
		}

		return tcpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.best_of_robotics.research.brsu.comm.communicationmodel.PeerToPeer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PeerToPeerItemProvider peerToPeerItemProvider;

	/**
	 * This creates an adapter for a {@link org.best_of_robotics.research.brsu.comm.communicationmodel.PeerToPeer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPeerToPeerAdapter() {
		if (peerToPeerItemProvider == null) {
			peerToPeerItemProvider = new PeerToPeerItemProvider(this);
		}

		return peerToPeerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.best_of_robotics.research.brsu.comm.communicationmodel.UDP} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UDPItemProvider udpItemProvider;

	/**
	 * This creates an adapter for a {@link org.best_of_robotics.research.brsu.comm.communicationmodel.UDP}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUDPAdapter() {
		if (udpItemProvider == null) {
			udpItemProvider = new UDPItemProvider(this);
		}

		return udpItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.best_of_robotics.research.brsu.comm.communicationmodel.Inproc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InprocItemProvider inprocItemProvider;

	/**
	 * This creates an adapter for a {@link org.best_of_robotics.research.brsu.comm.communicationmodel.Inproc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInprocAdapter() {
		if (inprocItemProvider == null) {
			inprocItemProvider = new InprocItemProvider(this);
		}

		return inprocItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.best_of_robotics.research.brsu.comm.communicationmodel.Broker} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BrokerItemProvider brokerItemProvider;

	/**
	 * This creates an adapter for a {@link org.best_of_robotics.research.brsu.comm.communicationmodel.Broker}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBrokerAdapter() {
		if (brokerItemProvider == null) {
			brokerItemProvider = new BrokerItemProvider(this);
		}

		return brokerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.best_of_robotics.research.brsu.comm.communicationmodel.Proxy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProxyItemProvider proxyItemProvider;

	/**
	 * This creates an adapter for a {@link org.best_of_robotics.research.brsu.comm.communicationmodel.Proxy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProxyAdapter() {
		if (proxyItemProvider == null) {
			proxyItemProvider = new ProxyItemProvider(this);
		}

		return proxyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.best_of_robotics.research.brsu.comm.communicationmodel.Port} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortItemProvider portItemProvider;

	/**
	 * This creates an adapter for a {@link org.best_of_robotics.research.brsu.comm.communicationmodel.Port}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortAdapter() {
		if (portItemProvider == null) {
			portItemProvider = new PortItemProvider(this);
		}

		return portItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (connectorItemProvider != null) connectorItemProvider.dispose();
		if (interactionItemProvider != null) interactionItemProvider.dispose();
		if (distributionItemProvider != null) distributionItemProvider.dispose();
		if (transportItemProvider != null) transportItemProvider.dispose();
		if (pubSubItemProvider != null) pubSubItemProvider.dispose();
		if (protocolItemProvider != null) protocolItemProvider.dispose();
		if (propertyItemProvider != null) propertyItemProvider.dispose();
		if (tcpItemProvider != null) tcpItemProvider.dispose();
		if (peerToPeerItemProvider != null) peerToPeerItemProvider.dispose();
		if (udpItemProvider != null) udpItemProvider.dispose();
		if (inprocItemProvider != null) inprocItemProvider.dispose();
		if (brokerItemProvider != null) brokerItemProvider.dispose();
		if (proxyItemProvider != null) proxyItemProvider.dispose();
		if (portItemProvider != null) portItemProvider.dispose();
	}

}
