// automatically generated by Xtext
grammar org.ros.model.ros_package.dsl.RosPackage with org.eclipse.xtext.common.Terminals

import "http://smach/1.0" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://ros/1.0" as ros

Package returns ros::Package:
	{ros::Package}
	'Package'
	name=EString
	'{'
		('author' author=EString)?
		('description' description=EString)?
		('license' license=EString)?
		('depend' '{' depend+=EString ( "," depend+=EString)* '}' )?
		('url' url=EString)?
		('rosdep' rosdep=EString)?
		('coordinators' '(' coordinators+=[SMACHStateMachine|EString] ( "," coordinators+=[SMACHStateMachine|EString])* ')' )?
		('node' '{' node+=Node ( "," node+=Node)* '}' )?
	'}';










SMACHState returns SMACHState:
	SMACHState_Impl | ActionState | ServiceState | FinalState | InitStraightState | InitActionState;




EString returns ecore::EString:
	STRING | ID;

Node returns ros::Node:
	{ros::Node}
	'Node'
	name=EString
	'{'
		('loopRate' loopRate=EDouble)?
		('args' args=EString)?
		('paramSource' paramSource=EString)?
		('namespace' namespace=EString)?
		('publisher' '{' publisher+=Publisher ( "," publisher+=Publisher)* '}' )?
		('subscriber' '{' subscriber+=Subscriber ( "," subscriber+=Subscriber)* '}' )?
		('serviceClient' '{' serviceClient+=ServiceClient ( "," serviceClient+=ServiceClient)* '}' )?
		('serviceServer' '{' serviceServer+=ServiceServer ( "," serviceServer+=ServiceServer)* '}' )?
		('parameter' '{' parameter+=Parameter ( "," parameter+=Parameter)* '}' )?
		('actionserver' '{' actionserver+=ActionServer ( "," actionserver+=ActionServer)* '}' )?
		('actionclient' '{' actionclient+=ActionClient ( "," actionclient+=ActionClient)* '}' )?
	'}';

SMACHStateMachine returns SMACHStateMachine:
	{SMACHStateMachine}
	'SMACHStateMachine'
	name=EString
	'{'
		('loopRate' loopRate=EDouble)?
		('args' args=EString)?
		('paramSource' paramSource=EString)?
		('namespace' namespace=EString)?
		('publisher' '{' publisher+=Publisher ( "," publisher+=Publisher)* '}' )?
		('subscriber' '{' subscriber+=Subscriber ( "," subscriber+=Subscriber)* '}' )?
		('serviceClient' '{' serviceClient+=ServiceClient ( "," serviceClient+=ServiceClient)* '}' )?
		('serviceServer' '{' serviceServer+=ServiceServer ( "," serviceServer+=ServiceServer)* '}' )?
		('parameter' '{' parameter+=Parameter ( "," parameter+=Parameter)* '}' )?
		('actionserver' '{' actionserver+=ActionServer ( "," actionserver+=ActionServer)* '}' )?
		('actionclient' '{' actionclient+=ActionClient ( "," actionclient+=ActionClient)* '}' )?
		('states' '{' states+=SMACHState ( "," states+=SMACHState)* '}' )?
		('transitions' '{' transitions+=SMACHTransition ( "," transitions+=SMACHTransition)* '}' )?
		('finalStates' '{' finalStates+=FinalState ( "," finalStates+=FinalState)* '}' )?
		('initialStates' '{' initialStates+=InitActionState ( "," initialStates+=InitActionState)* '}' )?
	'}';

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

Publisher returns ros::Publisher:
	{ros::Publisher}
	(latch?='latch')?
	'Publisher'
	name=EString
	'{'
		('queueSize' queueSize=EInt)?
		('eventHandler' eventHandler=EString)?
		('msg' msg=EString)?
	'}';

Subscriber returns ros::Subscriber:
	{ros::Subscriber}
	(eventPort?='eventPort')?
	'Subscriber'
	name=EString
	'{'
		('queueSize' queueSize=EInt)?
		('eventHandler' eventHandler=EString)?
		('msg' msg=EString)?
	'}';

ServiceClient returns ros::ServiceClient:
	{ros::ServiceClient}
	'ServiceClient'
	name=EString
	'{'
		('msg' msg=EString)?
	'}';

ServiceServer returns ros::ServiceServer:
	{ros::ServiceServer}
	'ServiceServer'
	name=EString
	'{'
		('msg' msg=EString)?
	'}';

Parameter returns ros::Parameter:
	{ros::Parameter}
	'Parameter'
	name=EString
	'{'
		('value' value=EString)?
		('type' type=ParameterTypes)?
	'}';

ActionServer returns ros::ActionServer:
	{ros::ActionServer}
	'ActionServer'
	name=EString
	'{'
		('ActionType' ActionType=EString)?
	'}';

ActionClient returns ros::ActionClient:
	{ros::ActionClient}
	'ActionClient'
	name=EString
	'{'
		('ActionType' ActionType=EString)?
	'}';

EInt returns ecore::EInt:
	'-'? INT;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

ParameterTypes returns ros::ParameterTypes:
	'ParameterTypes' /* TODO: implement this rule and an appropriate IValueConverter */;

SMACHState_Impl returns SMACHState:
	{SMACHState}
	'SMACHState'
	'{'
		('goal' goal=EString)?
		('goal_type' goal_type=SMACHGoalTypes)?
		('result' result=EString)?
	'}';

SMACHTransition returns SMACHTransition:
	'SMACHTransition'
	'{'
		('name' name=SMACHStateOutcomes)?
		'Source' Source=[SMACHState|EString]
		'Target' Target=[SMACHState|EString]
	'}';

FinalState returns FinalState:
	{FinalState}
	'FinalState'
	'{'
		('goal' goal=EString)?
		('goal_type' goal_type=SMACHGoalTypes)?
		('result' result=EString)?
		('type' type=SMACHStateOutcomes)?
	'}';

InitActionState returns InitActionState:
	{InitActionState}
	'InitActionState'
	'{'
		('goal' goal=EString)?
		('goal_type' goal_type=SMACHGoalTypes)?
		('result' result=EString)?
	'}';

SMACHGoalTypes returns SMACHGoalTypes:
	'SMACHGoalTypes' /* TODO: implement this rule and an appropriate IValueConverter */;

ActionState returns ActionState:
	{ActionState}
	'ActionState'
	name=EString
	'{'
		('ActionType' ActionType=EString)?
		('goal' goal=EString)?
		('goal_type' goal_type=SMACHGoalTypes)?
		('result' result=EString)?
	'}';

ServiceState returns ServiceState:
	{ServiceState}
	'ServiceState'
	name=EString
	'{'
		('msg' msg=EString)?
		('goal' goal=EString)?
		('goal_type' goal_type=SMACHGoalTypes)?
		('result' result=EString)?
	'}';

InitStraightState returns InitStraightState:
	{InitStraightState}
	'InitStraightState'
	'{'
		('goal' goal=EString)?
		('goal_type' goal_type=SMACHGoalTypes)?
		('result' result=EString)?
	'}';

SMACHStateOutcomes returns SMACHStateOutcomes:
	'SMACHStateOutcomes' /* TODO: implement this rule and an appropriate IValueConverter */;
