#!/usr/bin/env python
import roslib; roslib.load_manifest('[%=package.name%]')
import rospy

from std_msgs.msg import String
from std_msgs.msg import Float64


[%for (publisher in node.publisher) {%]
##include "std_msgs/[%=publisher.msg.asString()%].h"
[%}%]
[%for (subscriber in node.subscriber) {%]
##include "std_msgs/[%=subscriber.msg.asString()%].h"
[%}%]

class [%=node.name%]:
	def __init__(self):
		[%for (publisher in node.publisher) {%]
			self.[%=publisher.name%] = rospy.Publisher('[%=publisher.name%]', [%=publisher.eventHandler.asString()%])
		[%}%]
		[%for (subscriber in node.subscriber) {%]
			self.[%=subscriber.name%] = rospy.Subscriber("[%=subscriber.name%]",[%=subscriber.eventHandler.asString()%], self.[%=subscriber.name%]Callback) 
		[%}%]

[%for (subscriber in node.subscriber) {%]
	def [%=subscriber.name%]Callback(self, a):
[%=out.startPreserve("#", "#", "callbackCode", true)%]


[%=out.stopPreserve()%]
		pass
[%}%]	
		
	def run(self):
[%=out.startPreserve("#", "#", "runCode", true)%]


[%=out.stopPreserve()%]
		pass

if __name__ == "__main__":
	try:
		rospy.init_node('[%=node.name%]')
		n = [%=node.name%]()
		while not rospy.is_shutdown():
			n.run()
			rospy.sleep(0.2)
	except rospy.ROSInterruptException:
		print "Exit"



