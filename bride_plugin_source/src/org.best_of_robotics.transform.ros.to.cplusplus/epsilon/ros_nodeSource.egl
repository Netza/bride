// ROS includes
#include <ros/ros.h>
#include <dynamic_reconfigure/server.h>
#include <[%=node.name%]/[%=node.name%]Config.h>

// ROS message includes
[%
var str : String;
for (publisher in node.publisher)
{
	str = publisher.msg.replace('::','/');
%]
#include <[%=str%].h>
[%
}
%]
[%
var str : String;
for (subscriber in node.subscriber)
{
	str = subscriber.msg.replace('::','/');
%]
#include <[%=str%].h>
[%
}
%]
[%
var str : String;
for (serviceServer in node.serviceServer)
{
	str = serviceServer.msg.replace('::','/');
%]
#include <[%=str%].h>
[%
}
%]



#include <[%=node.name%]_common.cpp>


class [%=node.name%]_ros
{
	public:
		ros::NodeHandle n_;
		
		dynamic_reconfigure::Server<[%=node.name%]::[%=node.name%]Config> server;
  		dynamic_reconfigure::Server<[%=node.name%]::[%=node.name%]Config>::CallbackType f;
		

[%
for (publisher in node.publisher)
{
%]
		ros::Publisher [%=publisher.name%]_;
[%
}
%]		

[%
for (subscriber in node.subscriber)
{
%]
		ros::Subscriber [%=subscriber.name%]_;
[%
}
%]
[%
for (service in node.serviceServer)
{
%]
	ros::ServiceServer [%=service.name%]_;
[%
}
%]        
 
        [%=node.name%]_data component_data_;
        [%=node.name%]_config component_config_;
        [%=node.name%]_impl component_implementation_;

        [%=node.name%]_ros()
        {
       	
  			f = boost::bind(&[%=node.name%]_ros::configure_callback, this, _1, _2);
  			server.setCallback(f);
        	
        	
        	[%
        	for (service in node.serviceServer)
        	{
        	%]
        		std::string [%=service.name%]_remap;
        		n_.param("[%=service.name%]_remap", [%=service.name%]_remap, (std::string)"[%=service.name%]");
        		[%=service.name%]_ = n_.advertiseService([%=service.name%]_remap, &[%=node.name%]_impl::callback_[%=service.name%], &component_implementation_);
        	[%
        	}
        	%]
        
			[%
			for (publisher in node.publisher)
			{
			%]
				[%=publisher.name%]_ = 	n_.advertise<[%=publisher.msg%]>("[%=publisher.name%]", 1);
			[%
			}
			%]
			[%
			for (subscriber in node.subscriber)
			{
			%]
					[%=subscriber.name%]_ =  n_.subscribe("[%=subscriber.name%]_", 1, &[%=node.name%]_ros::topicCallback_[%=subscriber.name%], this);
			[%
			}
			%]  	

			[%
			for (parameter in node.parameter)
			{
				if(parameter.type == "string"){
			%]
				n_.param("[%=parameter.name%]", component_config_.[%=parameter.name%], (std::[%=parameter.type%])"[%=parameter.value%]");
			[%
			}
				else{
			%]
				n_.param("[%=parameter.name%]", component_config_.[%=parameter.name%], ([%=parameter.type%])[%=parameter.value%]);
			[%
			}
			}
			%]
            
        }
        [%
		for (service in node.serviceServer)
		{
		%]
		
		[%
		}
		%]
        
		[%
		for (subscriber in node.subscriber)
		{
		%]
        void topicCallback_[%=subscriber.name%](const [%=subscriber.msg%]::ConstPtr& msg)
		{
            component_data_.in_[%=subscriber.name%] = *msg;
            //update(); //call only if defined as event port, not called if it is an data port
        }
        [%
		}
		%]
		
		void configure_callback([%=node.name%]::[%=node.name%]Config &config, uint32_t level) 
		{
		[%
			for (parameter in node.parameter)
			{
			%]
				component_config_.[%=parameter.name%] = config.[%=parameter.name%];
			[%
			}
			%]
		}

        void configure()
        {
			component_implementation_.configure(component_config_);
        }

        void update()
        {
            component_implementation_.update(component_data_, component_config_);
            [%
			for (publisher in node.publisher)
			{
			%]
				[%=publisher.name%]_.publish(component_data_.out_[%=publisher.name%]);
			[%
			}
			%]
    
        }
 
};

int main(int argc, char** argv)
{

	ros::init(argc, argv, "[%=node.name%]");

	[%=node.name%]_ros node;
    node.configure();

 	ros::Rate loop_rate(100); // Hz // if cycle time == 0 do a spin() here without calling node.update() 

	while(node.n_.ok())
	{
        node.update();
		loop_rate.sleep();
		ros::spinOnce();
	}
    return 0;
}
