// automatically generated by Xtext
grammar org.ros.model.ros_coordinator.ROSCoordinator with org.eclipse.xtext.common.Terminals

import "http://ros/1.0" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://smach/1.0" as smach

Package returns Package:
	{Package}
	'Package'
	name=EString
	'{'
		('author' author=EString)?
		('description' description=EString)?
		('license' license=EString)?
		('depend' '{' depend+=EString ( "," depend+=EString)* '}' )?
		('url' url=EString)?
		('rosdep' rosdep=EString)?
		('coordinators' '(' coordinators+=[smach::SMACHStateMachine|EString] ( "," coordinators+=[smach::SMACHStateMachine|EString])* ')' )?
	'}';


SMACHState returns smach::SMACHState:
	SMACHState_Impl | ActionState | ServiceState | FinalState | InitStraightState | InitActionState;




EString returns ecore::EString:
	STRING | ID;
	
SMACHStateMachine returns smach::SMACHStateMachine:
	{smach::SMACHStateMachine}
	'SMACHStateMachine'
	name=EString
	'{'
		('states' '{' states+=SMACHState ( "," states+=SMACHState)* '}' )?
		('transitions' '{' transitions+=SMACHTransition ( "," transitions+=SMACHTransition)* '}' )?
		('finalStates' '{' finalStates+=FinalState ( "," finalStates+=FinalState)* '}' )?
		('initialStates' '{' initialStates+=InitActionState ( "," initialStates+=InitActionState)* '}' )?
	'}';

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;


EInt returns ecore::EInt:
	'-'? INT;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

ParameterTypes returns ParameterTypes:
	'ParameterTypes' /* TODO: implement this rule and an appropriate IValueConverter */;

SMACHState_Impl returns smach::SMACHState:
	{smach::SMACHState}
	'SMACHState'
	'{'
		('goal' goal=EString)?
		('goal_type' goal_type=SMACHGoalTypes)?
		('result' result=EString)?
	'}';

SMACHTransition returns smach::SMACHTransition:
	'SMACHTransition'
	'{'
		('name' name=SMACHStateOutcomes)?
		'Source' Source=[smach::SMACHState|EString]
		'Target' Target=[smach::SMACHState|EString]
	'}';

FinalState returns smach::FinalState:
	{smach::FinalState}
	'FinalState'
	'{'
		('goal' goal=EString)?
		('goal_type' goal_type=SMACHGoalTypes)?
		('result' result=EString)?
		('type' type=SMACHStateOutcomes)?
	'}';

InitActionState returns smach::InitActionState:
	{smach::InitActionState}
	'InitActionState'
	'{'
		('goal' goal=EString)?
		('goal_type' goal_type=SMACHGoalTypes)?
		('result' result=EString)?
	'}';

SMACHGoalTypes returns smach::SMACHGoalTypes:
	'SMACHGoalTypes' /* TODO: implement this rule and an appropriate IValueConverter */;

ActionState returns smach::ActionState:
	{smach::ActionState}
	'ActionState'
	name=EString
	'{'
		('ActionType' ActionType=EString)?
		('goal' goal=EString)?
		('goal_type' goal_type=SMACHGoalTypes)?
		('result' result=EString)?
	'}';

ServiceState returns smach::ServiceState:
	{smach::ServiceState}
	'ServiceState'
	name=EString
	'{'
		('msg' msg=EString)?
		('goal' goal=EString)?
		('goal_type' goal_type=SMACHGoalTypes)?
		('result' result=EString)?
	'}';

InitStraightState returns smach::InitStraightState:
	{smach::InitStraightState}
	'InitStraightState'
	'{'
		('goal' goal=EString)?
		('goal_type' goal_type=SMACHGoalTypes)?
		('result' result=EString)?
	'}';

SMACHStateOutcomes returns smach::SMACHStateOutcomes:
	'SMACHStateOutcomes' /* TODO: implement this rule and an appropriate IValueConverter */;
